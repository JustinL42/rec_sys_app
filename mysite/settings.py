"""
Django settings for recsys project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import configparser
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Get per-environment settings from the config files.
CONFIG_DIR = Path(BASE_DIR, "config")
CONFIG_FILES = [Path(CONFIG_DIR, f) for f in os.listdir(CONFIG_DIR)]
ENV = os.environ.get("ENV", "DEFAULT")
config_parser = configparser.ConfigParser()
config_parser.read(CONFIG_FILES)
config = config_parser[ENV]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config["django_secret_key"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.getboolean("debug")

ADMIN_PAGE = config["admin_page"].lower()

ALLOWED_HOSTS = config["allowed_hosts"].split(",")

if config["csrf_trusted_origins"]:
    CSRF_TRUSTED_ORIGINS = config["csrf_trusted_origins"].split(",")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "recsys.apps.RecSysConfig",
    "django.contrib.postgres",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "mysite.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "mysite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "HOST": config["db_host"],
        "PORT": config.getint("db_port"),
        "NAME": config["db_name"],
        "USER": config["db_user"],
        "PASSWORD": config["db_password"],
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.MinimumLengthValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.CommonPasswordValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.NumericPasswordValidator"
        ),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = False

USE_TZ = True

# USE_THOUSAND_SEPARATOR = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
EMAIL_FILE_PATH = str(os.path.join(BASE_DIR, "sent_emails"))

AUTH_USER_MODEL = "recsys.User"

Q_CLUSTER = {
    "name": "recsys_cluster",
    "orm": "default",
    "workers": 1,
    "recycle": 100,
    "max_attempts": 1,
    "timeout": 60 * 60 * 23,
    "retry": 60 * 60 * 24,
    "save_limit": 100,
    "queue_limit": 5,
    "catch_up": False,
    # uncomment this to disable the scheduler
    # 'scheduler': False,
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "non_admin": {
            "()": lambda : lambda r: not r.admin
        },
    },
    "formatters": {
        "search_format": {
            "format": "{asctime}\t{levelname}\t{user}\t{search_term}",
            "style": "{",
        },
        "user_format": {
            "format": "{asctime}\t{levelname}\t{user}\t{message}\t{rating}\t{title_id}\t{title:.40}",
            "defaults": {"title_id": "", "rating": ""},
            "style": "{",
            "validate": True,
        }
    },
    "handlers": {
        "search_handler": {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{config["log_dir"]}/search.log',
            'maxBytes': 1048576,
            'backupCount': 10,
            "formatter": "search_format",
            "filters": ["non_admin"],
        },
        "user_handler": {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': f'{config["log_dir"]}/user.log',
            'maxBytes': 1048576,
            'backupCount': 10,
            "formatter": "user_format",
            "filters": ["non_admin"],
        },
    },
    "loggers": {
        "search": {
            "handlers": ["search_handler"],
            "level": "DEBUG",
        },
        "user": {
            "handlers": ["user_handler"],
            "level": "DEBUG",
        },
    },
}
